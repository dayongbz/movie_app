{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","openUrl","link","window","open","_this2","this","_this$props","props","title","poster","genres","synopsis","rating","url","movieRating","react_default","a","createElement","className","onClick","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","Component","_ref","src","_ref2","prototype","PropTypes","string","isRequired","App","state","page","adding","_infiniteScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","offsetHeight","_this","_addMovies","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","console","log","data","catch","err","_renderMovies","movie","src_Movie_0","title_english","medium_cover_image","id","_callee2","_context2","abrupt","alert","concat","Object","toConsumableArray","xmlns","width","height","viewBox","d","fill","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d9101ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport LinesEllipsis from \"react-lines-ellipsis\";\nimport \"./Movie.css\";\n\nclass Movie extends Component {\n  openUrl = (link) => {\n    window.open(link,'_blank');\n  }\n  render() {\n    const { title, poster, genres, synopsis, rating, url } = this.props;\n    const movieRating = rating + 1;\n    return (\n      <div className=\"Movie\" onClick={() => this.openUrl(url)}>\n        <div className=\"Movie__Rating\">{movieRating}</div>\n        <div className=\"Movie__Column\">\n          <MoviePoster poster={poster} alt={title} />\n        </div>\n        <div className=\"Movie__Column\">\n          <h1>{title}</h1>\n          <div className=\"Movie__Genres\">\n            {genres.map((genre, index) => (\n              <MovieGenre genre={genre} key={index} />\n            ))}\n          </div>\n          <div className=\"Movie__Synopsis\">\n            <LinesEllipsis\n              text={synopsis}\n              maxLine=\"3\"\n              ellipsis=\"...\"\n              trimRight\n              basedOn=\"letters\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nfunction MoviePoster({ poster, alt }) {\n  return <img src={poster} alt={alt} className=\"Movie__Poster\" />;\n}\n\nfunction MovieGenre({ genre }) {\n  return <span className=\"Movie__Genre\">#{genre}</span>;\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired\n};\n\nMovieGenre.prototype = {\n  genres: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {\n    page: 1,\n    adding: false\n  };\n\n  componentDidMount() {\n    this._getMovies();\n    // window.addEventListener('scroll',this._infiniteScroll);\n  }\n\n  _infiniteScroll = () => {\n    let scrollHeight = Math.max(\n      document.documentElement.scrollHeight,\n      document.body.scrollHeight\n    );\n    let scrollTop = Math.max(\n      document.documentElement.scrollTop,\n      document.body.scrollTop\n    );\n    let offsetHeight = document.documentElement.offsetHeight;\n\n    if (scrollTop + offsetHeight >= scrollHeight) {\n      this._addMovies();\n    }\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi(this.state.page);\n    this.setState({\n      movies,\n      page: this.state.page + 1\n    });\n  };\n  _callApi = page => {\n    return fetch(\n      \"https://yts.lt/api/v2/list_movies.json?sort_by=download_count&limit=10&page=\" +\n        page\n    )\n      .then(response => response.json())\n      .then(json => {\n        console.log(json.data);\n        return json.data.movies;\n      })\n      .catch(err => console.log(err));\n  };\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n          key={movie.id}\n          rating={index}\n          url={movie.url}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _addMovies = async () => {\n    if (this.state.adding) {\n      return alert(\"불러오는 중 입니다.\");\n    } else {\n      this.setState({\n        adding: !this.state.adding\n      });\n      const movies = await this._callApi(this.state.page);\n      this.setState({\n        movies: [...this.state.movies, ...movies],\n        page: this.state.page + 1\n      });\n      this.setState({\n        adding: !this.state.adding\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={this.state.movies ? \"App\" : \"App-loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n        {this.state.movies ? (\n          <div className=\"change\" onClick={this._addMovies}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"35\"\n              height=\"35\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill=\"white\" />\n              <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n            </svg>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}